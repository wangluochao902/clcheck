Synopsis:
    command=Word statement=Statement (messages*=Message)?
;

// letters, numbers, underscores or hyphen
Word:
    /[^\d\W-][\w-]*/
;

Type:
    '<' type_name=TypeName '>'
;

TypeName:
    'INT' | 'FLOAT' | 'STRICTFLOAT' | 'BOOL' | 'STRING' | 'RELEASE' | 'VERSION' | 'PATH' | 'DIR' | 'PKG'
;

Statement:
    sequential_statement=SequentialStatement | unordered_statement=UnorderedStatement
;

SequentialStatement:
    elements*=Element
;

UnorderedStatement:
    '(' elements*=Element ')#'
;

Element:
    sub_command=SubCommand  | equal="=" | type=Type| option=Option | collection=Collection
;

SubCommand:
    content=Word (specification=Specification)?
;

Option:
    ShortOption | LongOption
;

ShortOption:
    dash='-' option=Word (equal='=' type=Type (multi='\+')?)?
;

LongOption:
    dash='--' option=Word (equal='=' type=Type (multi='+')?)?
;

Collection:
    one_must_present_collection=OneMustPresentCollection | optional_collection=OptionalCollection
;

OneMustPresentCollection:
    '{' statements *= Statement['|'] '}' specification=Specification? (multi="+")?
;

OptionalCollection:
    '[' statements *= Statement['|'] ']' specification=Specification? (multi="+" | "*")?
;

Comment:
    /\/\/.*$/
;

Message:
    "message" var=Word "=" value=STRING
;

//*************** Specification ***************
//*********************************************
Specification:
    '(' (after=After? before=Before? always=Always? mutex=Mutex? tag=Tag? info=Info?)#[','] (noskipws=NoSkipws)? ')'
;


After:
    "after" ":" item=Item
;

Before:
    "before" ":" item=Item
;

Always:
    "always" ":" item=Item
;

Mutex:
    "mutex" ":" item=Item
;

Tag:
    "tag" ":" name=Word2
;

Info:
    warning=Warning | error=Error | example=Example
;

Warning:
    "warning" ":" msg=StringOrVar
;

Error:
    "error" ":" msg=StringOrVar
;

Example:
    "example" ":" msg=StringOrVar
;

StringOrVar:
    string=STRING | var=Word
;

NoSkipws:
    "noskipws"
;

Item:
    list_of_word2s=ListOfWord2s | one_must_present_item=OneMustPresentItem
;

ListOfWord2s:
    '[' word2s+=Word2[','] ']' 
;

OneMustPresentItem:
    '{' word2s*=Word2['|'] '}'
;

// Word that can start with 'tag:' which may followed by dash or double dashes
Word2:
    /(tag:)?(-(-)?)?[^\d\W][\w-]*/
;
